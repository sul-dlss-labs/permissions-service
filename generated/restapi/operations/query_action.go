// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	permissions "github.com/sul-dlss-labs/permissions-service"
)

// QueryActionHandlerFunc turns a function with the right signature into a query action handler
type QueryActionHandlerFunc func(QueryActionParams, *permissions.Agent) middleware.Responder

// Handle executing the request and returning a response
func (fn QueryActionHandlerFunc) Handle(params QueryActionParams, principal *permissions.Agent) middleware.Responder {
	return fn(params, principal)
}

// QueryActionHandler interface for that can handle valid query action params
type QueryActionHandler interface {
	Handle(QueryActionParams, *permissions.Agent) middleware.Responder
}

// NewQueryAction creates a new http.Handler for the query action operation
func NewQueryAction(ctx *middleware.Context, handler QueryActionHandler) *QueryAction {
	return &QueryAction{Context: ctx, Handler: handler}
}

/*QueryAction swagger:route GET /permissions/{Action}/{Resource} queryAction

Query for permission

Given an Agent and a top level action, (e.g. "create", "update"), is the user permitted to carry out this function

*/
type QueryAction struct {
	Context *middleware.Context
	Handler QueryActionHandler
}

func (o *QueryAction) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewQueryActionParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *permissions.Agent
	if uprinc != nil {
		principal = uprinc.(*permissions.Agent) // this is really a permissions.Agent, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
