// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewQueryActionParams creates a new QueryActionParams object
// with the default values initialized.
func NewQueryActionParams() QueryActionParams {
	var ()
	return QueryActionParams{}
}

// QueryActionParams contains all the bound params for the query action operation
// typically these are obtained from a http.Request
//
// swagger:parameters queryAction
type QueryActionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The action the Agent taking on the object
	  Required: true
	  In: path
	*/
	Action string
	/*The identifier of a particular resource, or of a resouce class when the Action is "create"
	  Required: true
	  In: path
	*/
	Resource string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *QueryActionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	rAction, rhkAction, _ := route.Params.GetOK("Action")
	if err := o.bindAction(rAction, rhkAction, route.Formats); err != nil {
		res = append(res, err)
	}

	rResource, rhkResource, _ := route.Params.GetOK("Resource")
	if err := o.bindResource(rResource, rhkResource, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryActionParams) bindAction(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Action = raw

	if err := o.validateAction(formats); err != nil {
		return err
	}

	return nil
}

func (o *QueryActionParams) validateAction(formats strfmt.Registry) error {

	if err := validate.Enum("Action", "path", o.Action, []interface{}{"create", "update", "destroy"}); err != nil {
		return err
	}

	return nil
}

func (o *QueryActionParams) bindResource(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Resource = raw

	return nil
}
