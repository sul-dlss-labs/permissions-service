// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/sul-dlss-labs/permissions-service/generated/models"
)

// QueryActionOKCode is the HTTP code returned for type QueryActionOK
const QueryActionOKCode int = 200

/*QueryActionOK The query result

swagger:response queryActionOK
*/
type QueryActionOK struct {

	/*
	  In: Body
	*/
	Payload *models.QueryResponse `json:"body,omitempty"`
}

// NewQueryActionOK creates QueryActionOK with default headers values
func NewQueryActionOK() *QueryActionOK {
	return &QueryActionOK{}
}

// WithPayload adds the payload to the query action o k response
func (o *QueryActionOK) WithPayload(payload *models.QueryResponse) *QueryActionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query action o k response
func (o *QueryActionOK) SetPayload(payload *models.QueryResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryActionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryActionNotFoundCode is the HTTP code returned for type QueryActionNotFound
const QueryActionNotFoundCode int = 404

/*QueryActionNotFound Unable to find the specified resource or resource class

swagger:response queryActionNotFound
*/
type QueryActionNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewQueryActionNotFound creates QueryActionNotFound with default headers values
func NewQueryActionNotFound() *QueryActionNotFound {
	return &QueryActionNotFound{}
}

// WithPayload adds the payload to the query action not found response
func (o *QueryActionNotFound) WithPayload(payload *models.ErrorResponse) *QueryActionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query action not found response
func (o *QueryActionNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryActionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
