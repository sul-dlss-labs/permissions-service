// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sul-dlss-labs/permissions-service/generated/models"
)

// QueryActionReader is a Reader for the QueryAction structure.
type QueryActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewQueryActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewQueryActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewQueryActionOK creates a QueryActionOK with default headers values
func NewQueryActionOK() *QueryActionOK {
	return &QueryActionOK{}
}

/*QueryActionOK handles this case with default header values.

The query result
*/
type QueryActionOK struct {
	Payload *models.QueryResponse
}

func (o *QueryActionOK) Error() string {
	return fmt.Sprintf("[GET /permissions/{Action}/{Resource}][%d] queryActionOK  %+v", 200, o.Payload)
}

func (o *QueryActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.QueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryActionNotFound creates a QueryActionNotFound with default headers values
func NewQueryActionNotFound() *QueryActionNotFound {
	return &QueryActionNotFound{}
}

/*QueryActionNotFound handles this case with default header values.

Unable to find the specified resource or resource class
*/
type QueryActionNotFound struct {
	Payload *models.ErrorResponse
}

func (o *QueryActionNotFound) Error() string {
	return fmt.Sprintf("[GET /permissions/{Action}/{Resource}][%d] queryActionNotFound  %+v", 404, o.Payload)
}

func (o *QueryActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
