// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewQueryActionParams creates a new QueryActionParams object
// with the default values initialized.
func NewQueryActionParams() *QueryActionParams {
	var ()
	return &QueryActionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryActionParamsWithTimeout creates a new QueryActionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryActionParamsWithTimeout(timeout time.Duration) *QueryActionParams {
	var ()
	return &QueryActionParams{

		timeout: timeout,
	}
}

// NewQueryActionParamsWithContext creates a new QueryActionParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryActionParamsWithContext(ctx context.Context) *QueryActionParams {
	var ()
	return &QueryActionParams{

		Context: ctx,
	}
}

// NewQueryActionParamsWithHTTPClient creates a new QueryActionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryActionParamsWithHTTPClient(client *http.Client) *QueryActionParams {
	var ()
	return &QueryActionParams{
		HTTPClient: client,
	}
}

/*QueryActionParams contains all the parameters to send to the API endpoint
for the query action operation typically these are written to a http.Request
*/
type QueryActionParams struct {

	/*Action
	  The action the Agent taking on the object

	*/
	Action string
	/*Resource
	  The identifier of a particular resource, or of a resouce class when the Action is "create"

	*/
	Resource string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query action params
func (o *QueryActionParams) WithTimeout(timeout time.Duration) *QueryActionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query action params
func (o *QueryActionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query action params
func (o *QueryActionParams) WithContext(ctx context.Context) *QueryActionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query action params
func (o *QueryActionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query action params
func (o *QueryActionParams) WithHTTPClient(client *http.Client) *QueryActionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query action params
func (o *QueryActionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the query action params
func (o *QueryActionParams) WithAction(action string) *QueryActionParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the query action params
func (o *QueryActionParams) SetAction(action string) {
	o.Action = action
}

// WithResource adds the resource to the query action params
func (o *QueryActionParams) WithResource(resource string) *QueryActionParams {
	o.SetResource(resource)
	return o
}

// SetResource adds the resource to the query action params
func (o *QueryActionParams) SetResource(resource string) {
	o.Resource = resource
}

// WriteToRequest writes these params to a swagger request
func (o *QueryActionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Action
	if err := r.SetPathParam("Action", o.Action); err != nil {
		return err
	}

	// path param Resource
	if err := r.SetPathParam("Resource", o.Resource); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
