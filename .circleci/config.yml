version: 2
jobs:
  run_unit_tests:
    docker:
      - image: circleci/golang:latest
        environment:
          APP_PORT: 8082
    working_directory: /go/src/github.com/sul-dlss-labs/permissions-service
    steps:
      - checkout
      - run:
          name: Run Unit Tests
          command: make test

  run_e2e_tests:
    docker:
      - image: circleci/golang:latest
        environment:
          APP_PORT: 8082
    working_directory: /go/src/github.com/sul-dlss-labs/permissions-service
    steps:
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - setup_remote_docker
      - checkout
      - run:
          name: Run End to End Tests
          command: make integration_test

  register_image:
    docker:
      - image: circleci/golang:latest
    working_directory: /go/src/github.com/sul-dlss-labs/permissions-service
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build & Register Image
          command: |
            docker build -t suldlss/permissions-service:$CIRCLE_SHA1 .
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push suldlss/permissions-service:$CIRCLE_SHA1

  deploy_to_demo:
    docker:
      - image: circleci/golang:latest
    working_directory: /go/src/github.com/sul-dlss-labs/permissions-service
    steps:
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get install -y python-pip libyaml-dev python-dev jq
            sudo pip install awscli
      - checkout
      - run:
          name: Inject Environment Variables into Container (demo)
          command: |
            sed -i "s|REPLACE_TAG|$CIRCLE_SHA1|" task-definition.json
            sed -i "s|REPLACE_REGION|$DEMO_AWS_REGION|" task-definition.json
            sed -i "s|REPLACE_ACCOUNT_ID|$AWS_ACCOUNT_ID|g" task-definition.json
            sed -i "s|REPLACE_ENVIRONMENT|demo|g" task-definition.json
            cat task-definition.json  # Print task definition in logs
      - run:
          name: Register Task & Update Service (demo)
          command: |
            export AWS_ACCESS_KEY_ID=$DEMO_AWS_KEY
            export AWS_SECRET_ACCESS_KEY=$DEMO_AWS_SECRET
            aws configure set region $DEMO_AWS_REGION
            aws configure set default.output json
            aws configure list  # Get confirmation it worked in your logs
            revision_arn=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --region $DEMO_AWS_REGION | jq --raw-output --exit-status '.taskDefinition.taskDefinitionArn')
            cluster_arn=$(aws ecs list-clusters --region $DEMO_AWS_REGION | jq --raw-output --exit-status '.clusterArns[] | select(contains("infrastucture"))')
            aws ecs update-service --cluster "$cluster_arn" --service permissions --task-definition "$revision_arn" --region $DEMO_AWS_REGION

workflows:
  version: 2

  run_tests:
    jobs:
      - run_unit_tests:
          filters:
            branches:
              ignore: master
      - run_e2e_tests:
          filters:
            branches:
              ignore: master

  deploy_master_to_demo:
    jobs:
      - run_unit_tests:
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - run_e2e_tests:
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - register_image:
          requires:
            - run_unit_tests
            - run_e2e_tests
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - deploy_to_demo:
          requires:
            - register_image
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/

  deploy_tags_to_demo:
    jobs:
      - run_unit_tests:
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /v[0-9]+(\.[0-9]+)*(-demo)/
      - run_e2e_tests:
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /v[0-9]+(\.[0-9]+)*(-demo)/
      - register_image:
          requires:
            - run_unit_tests
            - run_e2e_tests
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /v[0-9]+(\.[0-9]+)*(-demo)/
      - deploy_to_demo:
          requires:
            - register_image
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /v[0-9]+(\.[0-9]+)*(-demo)/
